gst-plugin-rtp for Debian
==========================

This package provides advanced GStreamer RTP handling elements for 
professional streaming applications.

## Quick Start

After installation, the plugin provides these main elements:

1. **rtpsend** - Advanced RTP sender with custom payload handling
2. **rtprecv** - Advanced RTP receiver with custom payload handling  
3. **rtpgccbwe** - Google Congestion Control bandwidth estimator

Verify installation:
```bash
gst-inspect-1.0 rtpsend
gst-inspect-1.0 rtprecv
gst-inspect-1.0 rtpgccbwe
```

## Basic Usage Examples

### Simple RTP Streaming
```bash
# Sender
gst-launch-1.0 videotestsrc ! \
  x264enc ! rtph264pay ! \
  rtpsend name=send ! \
  udpsink host=192.168.1.100 port=5004

# Receiver
gst-launch-1.0 udpsrc port=5004 ! \
  rtprecv name=recv ! \
  rtph264depay ! avdec_h264 ! \
  autovideosink
```

### With Bandwidth Estimation
```bash
# Adaptive sender with congestion control
gst-launch-1.0 videotestsrc ! \
  x264enc bitrate=1000 ! rtph264pay ! \
  rtpsend name=send twcc-ext-id=1 ! \
  rtpgccbwe ! \
  udpsink host=192.168.1.100 port=5004

# Receiver with feedback
gst-launch-1.0 udpsrc port=5004 ! \
  rtprecv name=recv twcc-ext-id=1 ! \
  rtph264depay ! avdec_h264 ! \
  autovideosink \
  recv.recv_rtcp_sink ! \
  udpsink host=192.168.1.100 port=5005
```

## Enhanced Payloaders/Depayloaders

This plugin includes next-generation payloaders and depayloaders:

### Audio Formats
- AC-3: rtpac3pay2/rtpac3depay2
- AMR: rtpamrpay2/rtpamrdepay2
- Opus: rtpopuspay2/rtpopusdepay2
- PCMA/PCMU: rtppcmapay2/rtppcmadepay2, rtppcmupay2/rtppcmudepay2
- MPEG-4 Audio: rtpmp4apay2/rtpmp4adepay2

### Video Formats
- AV1: rtpav1pay/rtpav1depay
- VP8: rtpvp8pay2/rtpvp8depay2
- VP9: rtpvp9pay2/rtpvp9depay2
- JPEG: rtpjpegpay2/rtpjpegdepay2

### Example with Enhanced Payloader
```bash
# Using VP8 with enhanced payloader
gst-launch-1.0 videotestsrc ! \
  vp8enc ! rtpvp8pay2 ! \
  rtpsend ! udpsink host=192.168.1.100 port=5004
```

## Common Use Cases

1. **Professional Broadcasting**: High-quality RTP streaming with adaptive bitrates
2. **Video Conferencing**: Multi-party RTP sessions with congestion control
3. **IPTV Distribution**: Efficient transport stream delivery over RTP
4. **Surveillance Systems**: Reliable video streaming with bandwidth adaptation

## Configuration

### rtpsend Properties
- `twcc-ext-id`: Transport-wide congestion control extension ID
- `congestion-control`: Enable/disable congestion control
- `rtcp-mode`: RTCP mode (full, reduced, or disabled)

### rtprecv Properties  
- `twcc-ext-id`: Transport-wide congestion control extension ID
- `latency`: Buffer latency for jitter compensation
- `do-lost`: Generate lost packet events

### rtpgccbwe Properties
- `min-bitrate`: Minimum allowed bitrate
- `max-bitrate`: Maximum allowed bitrate
- `start-bitrate`: Initial bitrate estimate

## Troubleshooting

### Plugin Not Found
If elements are not detected after installation:
```bash
# Force registry update
rm -f ~/.cache/gstreamer-1.0/registry.*.bin
gst-inspect-1.0 --gst-disable-registry-fork
```

### Debug Output
Enable RTP-specific debug output:
```bash
GST_DEBUG=rtp*:5,rtpsend:6,rtprecv:6 gst-launch-1.0 [pipeline]
```

### Network Issues
For network troubleshooting:
```bash
# Monitor RTP traffic
tcpdump -i any -n port 5004

# Check firewall rules
iptables -L | grep 5004
```

## Integration with Applications

### Python Example
```python
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst

Gst.init(None)

# Create RTP sender pipeline
pipeline = Gst.parse_launch("""
    videotestsrc ! x264enc ! rtph264pay !
    rtpsend name=send ! udpsink host=192.168.1.100 port=5004
""")

pipeline.set_state(Gst.State.PLAYING)
```

### Bandwidth Adaptation Callback
```python
def on_target_bitrate_changed(gcc, bitrate, user_data):
    print(f"Target bitrate: {bitrate} bps")
    # Adjust encoder bitrate accordingly

gcc = pipeline.get_by_name("gcc")
gcc.connect("notify::target-bitrate", on_target_bitrate_changed, None)
```

## Performance Considerations

- Use appropriate buffer sizes for your network latency
- Monitor CPU usage with high bitrate streams
- Consider hardware acceleration for encoding/decoding
- Use RTCP feedback for optimal performance

## GStreamer 1.20+ Requirement

This plugin requires GStreamer 1.20 or later due to:
- Enhanced RTP header extension support
- Improved RTCP handling capabilities
- Transport-wide congestion control features

## Known Limitations

- Some advanced features require GStreamer 1.22+
- Hardware-specific optimizations may vary by platform
- Certain payload formats have specific format requirements

## Support

For issues specific to this Debian package:
- Package Maintainer: gstreamer-rust@lists.freedesktop.org

For upstream plugin issues:
- Repository: https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs
- Issue Tracker: https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs/-/issues

## See Also

- gst-inspect-1.0(1)
- gst-launch-1.0(1)  
- RFC 3550 (RTP specification)
- RFC 8888 (Transport-wide congestion control)
- GStreamer RTP documentation: https://gstreamer.freedesktop.org/documentation/rtp/

 -- GStreamer Rust Plugins Maintainers <gstreamer-rust@lists.freedesktop.org>