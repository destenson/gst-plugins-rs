[package]
name = "stream-manager"
version.workspace = true
authors = ["GStreamer developers <gstreamer-devel@lists.freedesktop.org>"]
repository.workspace = true
license = "MIT OR Apache-2.0"
edition.workspace = true
rust-version.workspace = true
description = "Unified multi-stream recording and inference system"

[[bin]]
name = "stream-manager"
path = "src/main.rs"

[dependencies]
# GStreamer dependencies
gst = { workspace = true }
gst-app = { workspace = true }
gst-base = { workspace = true }
gst-rtsp = { workspace = true }
gst-rtsp-server = { workspace = true }
gst-webrtc = { workspace = true }
gst-video = { workspace = true }
gst-audio = { workspace = true }
gst-rtp = { workspace = true }
gst-sdp = { workspace = true }

# Async runtime
tokio = { version = "1.47.1", features = ["full"] }
futures = "0.3.31"

# Web framework
actix-web = "4.11.0"
actix-ws = "0.3.0"
actix-rt = "2.11.0"
actix-files = "0.6.8"
rust-embed = { version = "8.7.2", features = ["debug-embed"] }
mime_guess = "2.0.5"
httpdate = "1.0.3"
hex = "0.4"

# Serialization
serde = { version = "1.0.228", features = ["derive"] }
serde_json = "1.0.145"
toml = "0.9.7"

# Logging and tracing
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "json"] }

# Database
sqlx = { version = "0.8.6", features = ["sqlite", "runtime-tokio", "migrate", "macros", "chrono"] }

# Monitoring
prometheus = "0.14.0"

# File watching
notify = "8.2.0"

# Error handling
thiserror = "2.0.17"
anyhow = "1.0.100"

# Time handling
chrono = { version = "0.4.42", features = ["serde"] }

# HTTP client
reqwest = { version = "0.12.23", features = ["json"] }

# UUID generation
uuid = { version = "1.18.1", features = ["v4", "serde"] }

# Async traits
async-trait = "0.1.89"

# Input validation
validator = { version = "0.20.0", features = ["derive"] }

# Command line parsing
clap = { version = "4.5.48", features = ["derive", "env"] }

# Recovery module dependencies
rand = "0.9.2"
parking_lot = "0.12.4"
sys-info = "0.9.1"

# OpenTelemetry
opentelemetry = { version = "0.31.0", features = ["metrics", "trace"] }
opentelemetry-otlp = { version = "0.31.0", features = ["grpc-tonic", "metrics", "trace"] }

# CPU Inference dependencies
ort = { version = "1.16.3", features = ["load-dynamic"], optional = true }
image = { version = "0.25.8", optional = true }
imageproc = { version = "0.25.0", optional = true }
rayon = { version = "1.11.0", optional = true }
ndarray = { version = "0.16.1", optional = true }
opentelemetry_sdk = { version = "0.31.0", features = ["rt-tokio", "trace", "metrics"] }
opentelemetry-semantic-conventions = { version = "0.31.0", features = ["semconv_experimental"] }
tracing-opentelemetry = "0.31.0"
sha2 = "0.10.9"
actix = "0.13.5"
actix-web-actors = "4.3.0"

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3.9", features = ["fileapi", "winnt"] }
windows-sys = { version = "0.61.1", features = ["Win32_Storage_FileSystem"] }

[target.'cfg(unix)'.dependencies]
nix = { version = "0.30.1", features = ["fs"] }

[dev-dependencies]
tempfile = "3.23.0"
mockito = "1.7.0"

[features]
default = []
nvidia = []  # For NVIDIA inference support (PRP-21)
cpu-inference = ["ort", "image", "imageproc", "rayon", "ndarray"]  # For CPU inference support (PRP-22)
serve-static-from-fs = []  # Prefer loading static assets from disk even in release builds
