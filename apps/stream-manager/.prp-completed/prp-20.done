PRP-20: State Persistence and Database Integration - Completed

Implementation Summary:
- Created comprehensive SQLite database layer with connection pooling
- Implemented stream state persistence for restoration after restart
- Added recording metadata tracking with proper indexes for fast seeking
- Created state save/restore mechanism for application state
- Simplified schema to only persist essential data (no metrics/events bloat)
- Added proper indexes on start_time, end_time for fast time-based queries
- Implemented cleanup procedures for old recordings
- Database migrations system for schema evolution

Key Components:
- database/mod.rs: Main database operations with SQLite pool
- database/schema.rs: Data models for streams, recordings, and state
- database/queries.rs: Advanced query operations (stats, gaps, storage usage)
- database/migrations.rs: Migration system for schema updates
- migrations/001_initial_schema.sql: Initial database schema with indexes

Validation:
- All 7 database tests passing
- Stream CRUD operations working
- Recording tracking with foreign key constraints
- State persistence and restoration tested
- Database maintenance operations (vacuum, analyze, checkpoint)
- Cleanup of old recordings working

Database Features:
- WAL mode enabled for better concurrency
- Foreign key constraints enforced
- Optimized indexes for time-based seeking
- Connection pooling with configurable limits
- Automatic migration system

